<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Singapore-MIT Alliance for Research and Technology -->

<config>
	<!-- Groupings of stored procedures, used for loading network data from certain tables. -->
	<db_proc_groups>
		<!-- Entire Singapore network -->
		<proc_map id="singapore" format="aimsun">
			<mapping name="nodes" procedure="get_singapore_nodes()"/>
			<mapping name="links" procedure="get_singapore_links()"/>
			<mapping name="turning_groups" procedure="get_singapore_turning_groups()"/>
			<mapping name="turning_paths" procedure="get_singapore_turning_paths()"/>
			<mapping name="turning_polylines" procedure="get_singapore_turning_polylines()"/>
			<mapping name="turning_conflicts" procedure="get_singapore_turning_conflicts()"/>
			<mapping name="road_segments" procedure="get_singapore_road_segments()"/>
			<mapping name="segment_polylines" procedure="get_singapore_segment_polylines()"/>
			<mapping name="lanes" procedure="get_singapore_lanes()"/>
			<mapping name="lane_polylines" procedure="get_singapore_lane_polylines()"/>
			<mapping name="lane_connectors" procedure="get_singapore_lane_connectors()"/>
			<mapping name="bus_stops" procedure="get_singapore_bus_stops()"/>
			<mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_frequency()"/>
			<mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
			<mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
			<mapping name="mrt_road_segments" procedure="get_pt_mrt_segments()"/>
			<!--Stored procedures for route-choice-->
			<mapping name="pt_edges" procedure="get_pt_edges()"/>
			<mapping name="pt_vertices" procedure="get_pt_vertices()"/>
			<mapping name="rail_transit_edges" procedure="get_rail_transit_edges()"/>
			<mapping name="pvt_pathset" procedure="get_pvt_pathset"/>
			<mapping name="pt_pathset" procedure="get_pt_pathset"/>
			<mapping name="erp_gantry_zone" procedure="get_erp_gantry_zone()"/>
			<mapping name="erp_section" procedure="get_erp_section()"/>
			<mapping name="erp_surcharge" procedure="get_erp_surcharge()"/>			
		</proc_map>

		<!-- Small CBD network -->
		<proc_map id="small_cbd" format="aimsun">
			<mapping name="nodes" procedure="get_small_cbd_nodes()"/>
			<mapping name="links" procedure="get_small_cbd_links()"/>
			<mapping name="turning_groups" procedure="get_small_cbd_turning_groups()"/>
			<mapping name="turning_paths" procedure="get_small_cbd_turning_paths()"/>
			<mapping name="turning_polylines" procedure="get_small_cbd_turning_polylines()"/>
			<mapping name="turning_conflicts" procedure="get_small_cbd_turning_conflicts()"/>
			<mapping name="road_segments" procedure="get_small_cbd_road_segments()"/>
			<mapping name="segment_polylines" procedure="get_small_cbd_segment_polylines()"/>
			<mapping name="lanes" procedure="get_small_cbd_lanes()"/>
			<mapping name="lane_polylines" procedure="get_small_cbd_lane_polylines()"/>
			<mapping name="lane_connectors" procedure="get_small_cbd_lane_connectors()"/>
			<mapping name="bus_stops" procedure="get_small_cbd_bus_stops()"/>
			<mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_frequency()"/>
			<mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
			<mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
			<!--Stored procedures for route-choice-->
			<mapping name="pvt_pathset" procedure="get_pvt_pathset_small_cbd"/>
			<mapping name="erp_gantry_zone" procedure="get_erp_gantry_zone()"/>
			<mapping name="erp_section" procedure="get_erp_section()"/>
			<mapping name="erp_surcharge" procedure="get_erp_surcharge()"/>
		</proc_map>

		<!-- Extended CBD network -->
		<proc_map id="extended_cbd" format="aimsun">
			<mapping name="nodes" procedure="get_ext_cbd_nodes()"/>
			<mapping name="links" procedure="get_ext_cbd_links()"/>
			<mapping name="turning_groups" procedure="get_ext_cbd_turning_groups()"/>
			<mapping name="turning_paths" procedure="get_ext_cbd_turning_paths()"/>
			<mapping name="turning_polylines" procedure="get_ext_cbd_turning_polylines()"/>
			<mapping name="turning_conflicts" procedure="get_ext_cbd_turning_conflicts()"/>
			<mapping name="road_segments" procedure="get_ext_cbd_road_segments()"/>
			<mapping name="segment_polylines" procedure="get_ext_cbd_segment_polylines()"/>
			<mapping name="lanes" procedure="get_ext_cbd_lanes()"/>
			<mapping name="lane_polylines" procedure="get_ext_cbd_lane_polylines()"/>
			<mapping name="lane_connectors" procedure="get_ext_cbd_lane_connectors()"/>
			<mapping name="bus_stops" procedure="get_ext_cbd_bus_stops()"/>
			<mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_frequency_extcbd()"/>
			<mapping name="pt_bus_routes" procedure="get_pt_bus_routes_extcbd()"/>
			<mapping name="pt_bus_stops" procedure="get_pt_bus_stops_extcbd()"/>
			<!--Stored procedures for route-choice-->
			<mapping name="pvt_pathset" procedure="get_pvt_pathset_extcbd"/>
			<mapping name="erp_gantry_zone" procedure="get_erp_gantry_zone()"/>
			<mapping name="erp_section" procedure="get_erp_section()"/>
			<mapping name="erp_surcharge" procedure="get_erp_surcharge()"/>
			<!--Stored procedure for trip-chains-->
			<mapping name="trip_chains" procedure="get_trip_chains_extcbd_stcalibration"/>
		</proc_map> 

		<!-- Changi network -->
		<proc_map id="changi" format="aimsun">
			<mapping name="nodes" procedure="get_changi_nodes()"/>
			<mapping name="links" procedure="get_changi_links()"/>
			<mapping name="turning_groups" procedure="get_changi_turning_groups()"/>
			<mapping name="turning_paths" procedure="get_changi_turning_paths()"/>
			<mapping name="turning_polylines" procedure="get_changi_turning_polylines()"/>
			<mapping name="turning_conflicts" procedure="get_changi_turning_conflicts()"/>
			<mapping name="road_segments" procedure="get_changi_road_segments()"/>
			<mapping name="segment_polylines" procedure="get_changi_segment_polylines()"/>
			<mapping name="lanes" procedure="get_changi_lanes()"/>
			<mapping name="lane_polylines" procedure="get_changi_lane_polylines()"/>
			<mapping name="lane_connectors" procedure="get_changi_lane_connectors()"/>
			<mapping name="bus_stops" procedure="get_changi_bus_stops()"/>
			<mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_frequency()"/>
			<mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
			<mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
			<!--Stored procedures for route-choice-->
			<mapping name="pvt_pathset" procedure="get_pvt_pathset_changi"/>
			<mapping name="erp_gantry_zone" procedure="get_erp_gantry_zone()"/>
			<mapping name="erp_section" procedure="get_erp_section()"/>
			<mapping name="erp_surcharge" procedure="get_erp_surcharge()"/>
		</proc_map> 
	</db_proc_groups>

	<!-- System configuration properties -->
	<system>
		<!-- Implementation to use for the Aura Manager. -->
		<!-- Values include: rdu, rstar (default), simtree, packing-tree -->
		<aura_manager_impl value="packing-tree"/>
            
		<!-- Order in which agents are to be loaded into the simulation -->
		<!-- Values include: database, drivers, pedestrians, passenger -->
		<load_agents order="database"/>

		<!--  Commsim (communication) settings -->
		<commsim enabled="false"> <!-- If false, the Broker is never added, so no commsim activities take place. -->
			<min_clients value="1"/> <!-- Sim Mobility will hold on time tick 1 until this many clients connect. -->
			<io_threads value="2"/> <!-- The number of threads to use for boost's io_service (for reading from Android clients). -->
			<hold_tick value="500"/> <!-- Which tick to enforce the "min_clients" restriction at. -->
			<use_ns3 value="true"/>  <!-- Use ns-3 to route network traffice between agents? If not, opaque messages are dispatched immediately. -->
		</commsim>

		<!-- Properties for SimMobility-MPI -->
		<partitioning_solution_id   value="1"    units="unit" />

		<network>
			<!-- Setting to "database" will load the road network from the database. By default we load from "xml". -->
			<!-- NOTE: This is fairly confusing; later we'll make it easier for different users to -->
			<!--       maintain their own configurations. -->
			<network_source value="database"/>

			<!-- If loading from XML, which input file? Default (or blank string) will force private/SimMobilityInput.xml -->
			<!-- If Writing XML, which output file? Default (or blank string) don't write at all -->
			<!-- This only has an effect if network_source is set to "xml" -->
			<network_xml_file_input value=""/>
			<network_xml_file_output value=""/>

			<!-- If loading from the database, which database, proc_map, and credentials are used? -->
			<network_database database="fm_remote" credentials="fm_remote_plain" proc_map="extended_cbd"/>
		</network>
        
		<!-- Where to find our various schema files. -->
		<!-- Overrides xsi:schemaLocation in the files themselves. -->
		<!-- Note that absolute paths are allowed, and that relative paths are relative to the current working directory. -->
		<xsd_schema_files>
			<!-- Where to find our Road Network schema files. -->
			<!-- The first valid path is used. -->
			<road_network>
				<option value="shared/geospatial/xmlLoader/geo10.xsd"/>     <!-- Running from dev/Basic or from Eclipse -->
				<option value="../shared/geospatial/xmlLoader/geo10.xsd"/>  <!-- Running from dev/Basic/Debug or dev/Basic/Release -->
			</road_network>
		</xsd_schema_files>
        
		<!-- The new parser will simply load everything in the "generic_props" section into "SystemParams.genericProps".  -->
		<!-- In other words, you DO NOT need to update the parser just to add a simple string-based configuration parameter to -->
		<!-- the config file. This is intended to be used for new or temporary features. -->
		<generic_props>
			<!-- The current control strategy for buses. Can be "headway_based", "evenheadway_based", "hybrid_based", or (default) "no_control" -->
			<property key="busline_control_type" value="headway_based"/>
            
			<!-- Default number of buses that can be accommodated in a bus stop -->
			<!-- This attribute must ideally come for each bus stop from the database -->
			<!-- Since we currently do  not have this data, we use a generic property -->
			<property key="buses_per_stop" value="2"/>
            
			<!--Specifies the short-term driving model in un-signalised interesections.
			Valid models: "slot-based", "conflict-based" (default)
			Note: Both, slot-based and conflict-based require the stored procedures for turnings and conflicts. If these are not specified, 
			there is no intersection driving behaviour i.e. vehicles collide with each other in the intersection-->
			<property key="intersection_driving_model" value="conflict-based"/>

			<!--Specifies the location of the dirver behaviour parameter files-->
			<property key="driver_behaviour_file" value="data/driver_behavior_model/driver_param.xml"/>
			<property key="amod_behaviour_file" value="data/driver_behavior_model/amod_driver_param.xml"/>
		</generic_props>
	</system>

	<!-- List of all Worker types and their properties. -->
	<!-- granularity of each component must be a multiple of the "base" granularity -->
	<workers>
		<person count="5" granularity="100 ms"/> <!-- Person agents (with Roles) -->
		<signal count="1" granularity="1 second"/> <!-- Traffic signals -->
		<intersection_manager count="0" granularity="1 second"/> <!-- Intersection managers -->
		<communication count="0" granularity="100 ms"/>  <!-- Communication simulator -->
	</workers>

	<model_scripts path="scripts/lua/mid/behavior-models/" format="lua">
		<script name="logit" file="logit.lua"/> <!--The main logit code for multinomial and nested logit models-->
		<script name="pvtrc" file="pvtrc.lua"/> <!--private traffic route choice-->
		<script name="ptrc" file="ptrc.lua"/> <!--public transit route choice-->
	</model_scripts>

	<!-- FMOD controller settings. This is for FMOD extention -->
	<fmodcontroller enabled="false">
		<ip_address value="127.0.0.1"/>
		<port value="9000"/>
		<update_time_ms value="500"/>
		<map_file value="cityhall/cityhall.osm"/>
		<blocking_time_sec value="5"/>
	</fmodcontroller>   

	<vehicleTypes>
		<vehicleType name="Car" length="4.0" width="2.0" capacity="4"/>
		<vehicleType name="Truck" length="6.0" width="2.0" capacity="8"/>
		<vehicleType name="BusTravel" length="12.0" width="3.0" capacity="100"/>
	</vehicleTypes>

	<tripFiles>
		<!--<tripFile name="CarTrips" fileName="data/carTrips.xml"/>-->
		<!--<tripFile name="TruckTrips" fileName="data/truckTrips.xml"/>-->
	</tripFiles>

	<person_characteristics>
		<person lowerAge="0" upperAge="5" lowerSecs="5" upperSecs="10" walkSpeed_kmph="3"/>
		<person lowerAge="5" upperAge="30" lowerSecs="3" upperSecs="7" walkSpeed_kmph="5"/>
		<person lowerAge="30" upperAge="40" lowerSecs="4" upperSecs="8" walkSpeed_kmph="4.5"/>
		<person lowerAge="40" upperAge="50" lowerSecs="5" upperSecs="9" walkSpeed_kmph="4"/>
		<person lowerAge="50" upperAge="60" lowerSecs="6" upperSecs="10" walkSpeed_kmph="3"/>
		<person lowerAge="60" upperAge="100" lowerSecs="8" upperSecs="15" walkSpeed_kmph="2.5"/>
	</person_characteristics>
    
	<!-- To Enable Buses: make sure the following stored procedures in your <proc_map> not empty and valid -->
	<!-- 1. "pt_bus_dispatch_freq" -->
	<!-- 2. "pt_bus_routes" -->
	<!-- 3. "pt_bus_stops" -->
	<!-- With the above three procedures present and valid, enable buses with "<busController enabled="true" />" in the <busController> -->
	<!-- The current control strategy for buses. Can be "headway_based", "evenheadway_based", "hybrid_based", or (default) "no_control" -->
	<busController enabled="true" busline_control_type="headway_based"/>
	
	<!-- default capacity value -->
	<bus_default_capacity value="100"/>

	<!-- flag to control if PT graph should be loaded -->
	<public_transit enabled="true"/>
	
	<!-- file names to output statistics-->   
	<output_statistics>                              
		<journey_time file="journey_time.csv"/>
		<waiting_time file="waiting_time.csv"/>
		<waiting_count file="waiting_count.csv" interval="900000"/>
		<travel_time file="travel_time.csv"/>
		<pt_stop_stats file="pt_stop_stats.csv"/>		
		<od_travel_time enabled="false" file-name="od_travel_time.csv" interval="900000"/>
		<segment_travel_time enabled="false" file-name="segment_travel_time.csv" interval="300000"/>
		<!--If enabled, outputs the density at every road segment present at the end of the 
		update interval (in milliseconds)-->
		<segment_density updateInterval="300000" outputEnabled="false" file-name="density_map.csv"/>
		<!--If enabled, outputs the vehicles counted by every loop detector, accumulated over the given period length (in milliseconds)
		i.e. count of vehicles passing a loop detector in every "600,000" milliseconds -->
		<loop-detector_counts frequency="900000" outputEnabled="true" file-name="VehicleCounts.csv"/>
		<assignment_matrix enabled="false" file-name="assignment_matrix.csv"/>
	</output_statistics>	

	<path-set-config-file value="data/pathset_config.xml" />
	<travel_time_update interval="300" alpha="0.5" />	
</config>

