                    #=======================================================================================================# 
                    #	                    DynaMIT-R SCRIPT: Read estimated ODs from GLS offline code output and           #
                    #                               write in the demand file format used by DynaMIT-R                       #
                    #=======================================================================================================#
#==================================================================================================================================================================
# Author: Ravi Seshadri
# Date: February, 2015
#==================================================================================================================================================================

#       Description: This scipt reads the estimated ODs generated by the GLS dynamic OD estimation module of DynaMIT-R and writes 
#       these estimated ODs into a file in the format required by the input OD demand file for DynaMIT-R. The functions in this  
#       script are used in the iterative offline calibration procedure so that after each iteration the obtained OD estimates can 
#       can be used as the historical OD matrix for the next calibration iteration. 
#----------------------------------------------------------------------------------------------------------------------
# SCRIPT INPUTS:
#       1. Reference demand file from which the ordering of OD pairs and associated origins/destination nodes are obtained
# ---------------------------------------------------------------------------------------------------------------------
# SCRIPT OUTPUTS:
#       1. Demand file in DynaMIT-R format containing the estimated ODs from the GLS folder

#====================================================================================================================================================================================|
# FUNCTION LIST AND BRIEF DESCRIPTION                                                                                                                                                |
# -------------------------------------------|------------------------------------------|--------------------------------------------------|-----------------------------------------|
#               NAME                         |                ARGUMENTS                 |           RETURN TYPE                            |                   DESCRIPTION           |
# -------------------------------------------|------------------------------------------|--------------------------------------------------|-----------------------------------------|
# READ_OD_LIST()                             |                  -                       | List of strings of the form 'origin_destination' | Read reference OD file to obtain list   |                          
#                                            |                                          | in the sequence that they appear in the OD file  | of OD pair strings in sequence          |
# READ_OD_GLS(list,datetime,datetime,string) | OD list, start/end time, GLS folder path | Estimated OD demands dictionary                  | Read estimated ODs from GLS folder      |
# WRITE_DEMAND_DMIT(dict,dict,dict)          | Estimated GLS Demand,OD list, output     |               -                                  | Write estimated ODs to DynaMIT-R format |
#                                            | OD demand filename                       |                                                  |                                         |
#====================================================================================================================================================================================|
import sys
import string
import os
import re
import math
import random
import copy
import datetime
N_ODS = 4103
INTERVAL = 15                                           # Interval size in minutes
START_TIME = datetime.datetime(2014,11,21,7,30,0)       # Simulation Interval start time 
END_TIME = datetime.datetime(2014,11,21,8,30,0)         # Simulation interval end time
#==================================================================================================================================================================
def READ_OD_LIST():
    Demand_15 = {}                                                                                  # Dictionary containing reference OD demands (Note: these are unused) 
    od_list = []                                                                                    # List containing 'Origin_destination' strings in sequence (as they appear in reference demand file)
    OD_Demand_15 = open("demand_new_sc.dat", "r")                                                   # Open reference OD Demand input file for DynaMIT-R
    #----------------------------------------------------------
    interval_index = 0
    for line_OD in OD_Demand_15:                                                                    # Read each line of reference OD demand file
        if line_OD !="" and line_OD !="\n" and line_OD !="<END>":
        #----------------------------------------------------------
            line_OD = line_OD.rstrip()                                                                  # Strip leading and trailing white spaces
            line_OD = line_OD.lstrip()
            parse_lbrace = re.findall(r'{',line_OD)
            parse_rbrace = re.findall(r'}',line_OD)
            # --------------------------------------------------------------------------------------
            # BEGIN INTERVAL
            if not(parse_lbrace) and not(parse_rbrace):
                line_OD = line_OD.split(" ")                                                            # Split string based on singlespace into list 
                interval = int(line_OD[0])                                                              # Get interval from list
                Demand_15[interval] = {}                                                                # Define sub-dictionary of demand dictionary for current interval
                interval_index += 1
            # --------------------------------------------------------------------------------------
            # BEGIN READING OD DEMANDS FOR CURRENT INTERVAL 
            elif parse_lbrace and parse_rbrace:
                line_OD = line_OD.split(" ")                                                            # Split string based on singlespace into list                                                 
                line_OD[0] = line_OD[0].lstrip("{")                                                     # Remove leading brace in first element  
                line_OD[2] = line_OD[2].rstrip("}")                                                     # Remove trailing brace in last element 
                str_OD = line_OD[0] + '_' + line_OD[1]                                                  # Define 'origin_destination' string from origin node and destination node
                Demand_15[interval][str_OD] = float(line_OD[2])                                         # Assign demand to respective dictionary key 
                if interval_index == 1:
                    od_list.append(str_OD)                                                                       # Populate the OD list in the first interval alone 
    OD_Demand_15.close()
    return od_list                                                                                  # 
#==================================================================================================================================================================
def READ_OD_GLSOFFLINE(od_list):
    file_estOD = open("resultOD.csv","r")
    OD_GLS = {}                                                                                 # Define dictionary to store estimated ODs from GLS folder (temp folder in DynaMIT-R)
    OD_index = 1
    Cur_Interval =  START_TIME.hour*60*60 + START_TIME.minute*60                                        # Start time of current interval in seconds 
    OD_GLS[Cur_Interval]={}
    for line in file_estOD:
        if OD_index == N_ODS + 1:
            OD_index = 1
            Cur_Interval = Cur_Interval + 60*INTERVAL
            OD_GLS[Cur_Interval]={}
        line = line.split(" ")
        OD_GLS[Cur_Interval][od_list[OD_index-1]]=float(line[0])                           # Assign demand to respective dictionary key
        OD_index += 1 
    return OD_GLS
#==================================================================================================================================================================
def WRITE_DEMAND_DMIT(Demand_GLS,od_list):
    outfile = open('demand.dat', "w")
    Lst_Int = []                                                                                    # Define List of interval start times in seconds
    for interval in Demand_GLS.keys():
        Lst_Int.append(interval)                                                                    # Populate list of interval start times
    Lst_Int.sort()
    for int_it in Lst_Int:
        strout = str(int_it) + " 0 " + "4" + "\n" + "{" + "\n"                                      # Write header for single interval (Note: The scaling factor '4' should be appropriately set dependeing on the interval size)
        outfile.write(strout)
        for ODpair in od_list:                                                                      # Traverse through OD pair list
            demand = '%.3f'%(Demand_GLS[int_it][ODpair])
            ODpair = ODpair.split("_")                                                              # Split OD pair string into origin and destination
            strout = "{" + ODpair[0] + " " + ODpair[1] + " " + str(demand) + "}" + "\n"             # Write single OD entry for current interval
            outfile.write(strout)
        strout = "}" + "\n" + "\n"
        outfile.write(strout)
    strout = "<END>"                                                                                # Write demand file footer
    outfile.write(strout)
    outfile.close()		
#==================================================================================================================================================================
def GENERATE_DEMAND_FILE():
    Demand_GLS = {}                                                                                 # Define dictionary to store estimated ODs from GLS folder (temp folder in DynaMIT-R)
    od_list = []                                                                                    # List containing 'Origin_destination' strings in sequence (as they appear in reference demand file)
    od_list = READ_OD_LIST()
    Demand_GLS = READ_OD_GLSOFFLINE(od_list)                                                               # Read estimated ODs from GLS folder
    #print(Demand_GLS.keys())
    WRITE_DEMAND_DMIT(Demand_GLS,od_list)                                                           # Write estimated ODs to OD demand file format for Dynamit-R
    print("  Generated MITSIM OD demand file ... ")
#==================================================================================================================================================================
if __name__ == '__main__':
    GENERATE_DEMAND_FILE()
#==================================================================================================================================================================

