rep(1, 100)
diag(rep(1, 100))
library(Matrix)
library(SparseM)
Matrix(diag(rep(1, 100)), sparse = TRUE)
Matrix(diag(rep(1, 10000)), sparse = TRUE)
N_OD <- 45988
no_dbparam <- 112
no_rcparams <- 11
N_Param = 10
library(Matrix)
N_Param = 10
Matrix(diag(rep(1, N_Param)), sparse = TRUE)
getwd()
setwd('SimMobST_Calibration/data/SensorMapping/')
list.files()
load('RealData_sec_LaneLv5min_Var.RData')
head(Data_avg)
unique(Data_avg$LaneID)
elngth(Data_avg$LaneID)
lngth(Data_avg$LaneID)
length(Data_avg$LaneID)
length(unique(Data_avg$LaneID))
as.data.frame(unique(Data_avg$LaneID))
head(as.data.frame(unique(Data_avg$LaneID)))
head(Data_avg)
head(Data_avg)
start_time = 6*60;
end_time = 7*60;
interval = 5;
warm_up_intervals = 0;
start_interval_slot = (start_time/interval) + warm_up_intervals;
end_interval_slot = end_time / interval;
last_sim_interval = ((end_time-start_time)*60*1000) - 1000;
get_interval_sim <- function(curr_time){
start_time = 6*60;
end_time = 7*60;
interval = 5;
warm_up_intervals = 0;
start_interval_slot = (start_time/interval) + warm_up_intervals;
end_interval_slot = end_time / interval;
last_sim_interval = ((end_time-start_time)*60*1000) - 1000;
if (curr_time == last_sim_interval){
curr_time = curr_time+1000;}
mins = (curr_time/(1000*60))
return (start_interval_slot + (mins/interval)-1)
}
get_interval_real <- function(curr_time){
mins = curr_time/60;
return (mins/interval)
}
sim_vehicle_counts <- read.table('SimMobility_Plus/avgVehicleCounts.csv', sep = ',')
real_vehicle_counts <- load('data/SensorMapping/RealData_sec_LaneLv5min_Var.RData'); real_vehicle_counts <- Data_avg; rm(Data_avg)
colnames(sim_vehicle_counts) <- c('Time', 'SensorID', 'SegID', 'LaneID', 'Count')
colnames(real_vehicle_counts) <- c('Time', 'SensorID', 'SegID', 'LaneID', 'Count', 'Var', 'Obs')
# Time convert
sim_vehicle_counts$Time <- sapply(sim_vehicle_counts$Time, get_interval_sim)
real_vehicle_counts$Time <- sapply(real_vehicle_counts$Time, get_interval_real)
