setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.csv('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
ODdata$Trips <- theta_OD_dash;
View(ODdata)
head(ODdata)
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
View(ODdata)
theta_OD_dash <- read.csv('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash
colnames(theta_OD_dash)
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.csv('theta_OD_dash.csv', header=FALSE);
theta_OD_dash <- as.data.frame(theta_OD_dash); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash
ODdata$Trips <- theta_OD_dash;
View(ODdata)
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash
ODdata$Trips <- theta_OD_dash;
View(ODdata)
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
View(ODdata)
View(theta_OD_dash)
ODdata$Trips <- theta_OD_dash$Trips;
View(ODdata)
q <- 1000
QC <- 10*q/4 #(3lanes * 900(veh/h) * (15/60h))
QC
q <- 1000
QC <- 100*q/4 #(3lanes * 900(veh/h) * (15/60h))
setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
ODdata$Trips <- theta_OD_dash$Trips;
ODdata
ODdata <- cbind(ODdata, paste(ODdata$Node_O, ODdata$Node_D)); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code')
PossibleSet <- unique(ODdata$Code)
length(PossibleSet)*4
# Regarding Starting Point
# Number of Starting Point
head(ODdata)
SPset <-  unique(ODdata$Node_O)
UniTime <- unique(ODdata$Time)
q <- 1000
QC <- 100*q/4 #(3lanes * 900(veh/h) * (15/60h))
i <- 1; j <- 1;
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata <- rbind(trODdata, SPset_data_time)
}
for (i in 2:length(SPset)){
j <- 1; SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata_temp <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata_temp <- rbind(trODdata_temp, SPset_data_time)
}
trODdata <- rbind(trODdata, trODdata_temp)
}
ODdata <- cbind(ODdata, paste(ODdata$Time, ODdata$Code), seq(1, dim(ODdata)[1]));  colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode', 'Seq')
trODdata <- cbind(trODdata, paste(trODdata$Time, trODdata$Code)); colnames(trODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode')
# As original sequence of OD data
trODdata_temp <- merge(ODdata, trODdata, by= 'RealCode', sort= T)
TruncatedODdata <- trODdata_temp[,c(2:7, 16, 8, 10)]
#TruncatedODdata <- subset(trODdata_temp, select=c('Index.x', 'Node_O.x', 'Node_D.x', 'Zone_O.x', 'Zone_D.x', 'Trips.x', 'Trips.y', 'Time.x', 'Seq'))
colnames(TruncatedODdata) <-  c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'trTrips',  'Time', 'Seq')
TruncatedODdata <- TruncatedODdata[order(TruncatedODdata$Seq),]
Truncated_theta_od = subset(TruncatedODdata, select=c('trTrips'))
TruncatedODdata <- subset(TruncatedODdata, select=-c(Trips, Seq))
plot(TruncatedODdata$Trips-TruncatedODdata$trTrips)
TruncatedODdata
TruncatedODdata
setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
ODdata$Trips <- theta_OD_dash$Trips;
# Possible Set
ODdata <- cbind(ODdata, paste(ODdata$Node_O, ODdata$Node_D)); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code')
PossibleSet <- unique(ODdata$Code)
length(PossibleSet)*4
# Regarding Starting Point
# Number of Starting Point
head(ODdata)
SPset <-  unique(ODdata$Node_O)
UniTime <- unique(ODdata$Time)
q <- 1000
QC <- 100*q/4 #(3lanes * 900(veh/h) * (15/60h))
i <- 1; j <- 1;
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata <- rbind(trODdata, SPset_data_time)
}
for (i in 2:length(SPset)){
j <- 1; SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata_temp <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata_temp <- rbind(trODdata_temp, SPset_data_time)
}
trODdata <- rbind(trODdata, trODdata_temp)
}
ODdata <- cbind(ODdata, paste(ODdata$Time, ODdata$Code), seq(1, dim(ODdata)[1]));  colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode', 'Seq')
trODdata <- cbind(trODdata, paste(trODdata$Time, trODdata$Code)); colnames(trODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode')
# As original sequence of OD data
trODdata_temp <- merge(ODdata, trODdata, by= 'RealCode', sort= T)
TruncatedODdata <- trODdata_temp[,c(2:7, 16, 8, 10)]
#TruncatedODdata <- subset(trODdata_temp, select=c('Index.x', 'Node_O.x', 'Node_D.x', 'Zone_O.x', 'Zone_D.x', 'Trips.x', 'Trips.y', 'Time.x', 'Seq'))
colnames(TruncatedODdata) <-  c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'trTrips',  'Time', 'Seq')
TruncatedODdata <- TruncatedODdata[order(TruncatedODdata$Seq),]
Truncated_theta_od = subset(TruncatedODdata, select=c('trTrips'))
TruncatedODdata <- subset(TruncatedODdata, select=-c(Trips, Seq))
setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
ODdata$Trips <- theta_OD_dash$Trips;
# Possible Set
ODdata <- cbind(ODdata, paste(ODdata$Node_O, ODdata$Node_D)); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code')
PossibleSet <- unique(ODdata$Code)
length(PossibleSet)*4
# Regarding Starting Point
# Number of Starting Point
head(ODdata)
SPset <-  unique(ODdata$Node_O)
UniTime <- unique(ODdata$Time)
q <- 1000
QC <- 100*q/4 #(3lanes * 900(veh/h) * (15/60h))
i <- 1; j <- 1;
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata <- rbind(trODdata, SPset_data_time)
}
for (i in 2:length(SPset)){
j <- 1; SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata_temp <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata_temp <- rbind(trODdata_temp, SPset_data_time)
}
trODdata <- rbind(trODdata, trODdata_temp)
}
ODdata <- cbind(ODdata, paste(ODdata$Time, ODdata$Code), seq(1, dim(ODdata)[1]));  colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode', 'Seq')
trODdata <- cbind(trODdata, paste(trODdata$Time, trODdata$Code)); colnames(trODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode')
# As original sequence of OD data
trODdata_temp <- merge(ODdata, trODdata, by= 'RealCode', sort= T)
TruncatedODdata <- trODdata_temp[,c(2:7, 16, 8, 10)]
#TruncatedODdata <- subset(trODdata_temp, select=c('Index.x', 'Node_O.x', 'Node_D.x', 'Zone_O.x', 'Zone_D.x', 'Trips.x', 'Trips.y', 'Time.x', 'Seq'))
colnames(TruncatedODdata) <-  c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'trTrips',  'Time', 'Seq')
TruncatedODdata <- TruncatedODdata[order(TruncatedODdata$Seq),]
Truncated_theta_od = subset(TruncatedODdata, select=c('trTrips'))
plot(TruncatedODdata$Trips-TruncatedODdata$trTrips)
TruncatedODdata
TruncatedODdata
View(trODdata)
View(TruncatedODdata)
TruncatedODdata$Trips
TruncatedODdata$trTrips
plot(TruncatedODdata$Trips+TruncatedODdata$trTrips)
-
plot(TruncatedODdata$Trips-TruncatedODdata$trTrips)
plot(TruncatedODdata$Trips-TruncatedODdata$trTrips)
plot(TruncatedODdata$Trips, ylim=c(0, 650), ylab=c('# of trips'))
plot(TruncatedODdata$trTrips, ylim=c(0, 650), ylab=c('# of trips'))
sum(TruncatedODdata$Trips)-sum(TruncatedODdata$trTrips)
sum(TruncatedODdata$trTrips)/sum(TruncatedODdata$Trips)*100
setwd('/home/chuyaw/Desktop/SimMobST_Calibration/data/TripChain')
list.files()
ODdata <- read.csv('ODdata.csv', header=FALSE, sep = ' '); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time')
#theta_OD_dash <- read.csv('Truncated_theta_od.csv', header=FALSE, sep = ' '); colnames(theta_OD_dash) <- c('Trips')
theta_OD_dash <- read.table('theta_OD_dash.csv', header=FALSE); colnames(theta_OD_dash) <- c('Trips')
ODdata$Trips <- theta_OD_dash$Trips;
# Possible Set
ODdata <- cbind(ODdata, paste(ODdata$Node_O, ODdata$Node_D)); colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code')
PossibleSet <- unique(ODdata$Code)
length(PossibleSet)*4
# Regarding Starting Point
# Number of Starting Point
head(ODdata)
SPset <-  unique(ODdata$Node_O)
UniTime <- unique(ODdata$Time)
q <- 1000
QC <- 2.5*q/4 #(3lanes * 900(veh/h) * (15/60h))
i <- 1; j <- 1;
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata <- rbind(trODdata, SPset_data_time)
}
for (i in 2:length(SPset)){
j <- 1; SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)
}
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips  }
trODdata_temp <- SPset_data_time
for (j in 2:length(UniTime)){
SPset_data <- subset(ODdata, subset=(ODdata$Node_O==SPset[i])); SPset_data <- subset(SPset_data, subset=(SPset_data$Time==UniTime[j])); SPset_data_time <- SPset_data
#sum(SPset_data_time$Trips) # 932 >>> QC
if (sum(SPset_data_time$Trips)>QC){
portion <- SPset_data_time$Trips/sum(SPset_data_time$Trips)
SPset_data_time$Trips <- round(portion*QC)    }
if (sum(SPset_data_time$Trips)<=QC){ SPset_data_time$Trips <- SPset_data_time$Trips }
trODdata_temp <- rbind(trODdata_temp, SPset_data_time)
}
trODdata <- rbind(trODdata, trODdata_temp)
}
ODdata <- cbind(ODdata, paste(ODdata$Time, ODdata$Code), seq(1, dim(ODdata)[1]));  colnames(ODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode', 'Seq')
trODdata <- cbind(trODdata, paste(trODdata$Time, trODdata$Code)); colnames(trODdata) <- c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'Time', 'Code', 'RealCode')
# As original sequence of OD data
trODdata_temp <- merge(ODdata, trODdata, by= 'RealCode', sort= T)
TruncatedODdata <- trODdata_temp[,c(2:7, 16, 8, 10)]
#TruncatedODdata <- subset(trODdata_temp, select=c('Index.x', 'Node_O.x', 'Node_D.x', 'Zone_O.x', 'Zone_D.x', 'Trips.x', 'Trips.y', 'Time.x', 'Seq'))
colnames(TruncatedODdata) <-  c('Index', 'Node_O', 'Node_D', 'Zone_O', 'Zone_D', 'Trips', 'trTrips',  'Time', 'Seq')
TruncatedODdata <- TruncatedODdata[order(TruncatedODdata$Seq),]
Truncated_theta_od = subset(TruncatedODdata, select=c('trTrips'))
plot(TruncatedODdata$Trips-TruncatedODdata$trTrips)
plot(TruncatedODdata$Trips, ylim=c(0, 650), ylab=c('# of trips'))
plot(TruncatedODdata$trTrips, ylim=c(0, 650), ylab=c('# of trips'))
sum(TruncatedODdata$Trips)-sum(TruncatedODdata$trTrips)
sum(TruncatedODdata$trTrips)/sum(TruncatedODdata$Trips)*100
QC <- 3*q/4 #(3lanes * 900(veh/h) * (15/60h))
sum(TruncatedODdata$Trips)
sum(TruncatedODdata$trTrips)
F_start <- proc.time()
#Ffunction <- function(interval_od_min, start_hr, end_hr) {
start_hr <- 6; end_hr <- 7 # Previously, start = 10; end = 11;
interval_od_min <- 15; #interval_sensor <- 5; no_sensor <- 650;
## 1. Environmental setting
# Set working directory
setwd('/home/chuyaw/SimMobST_Calibration/data/TripChain')
setwd('/home/SimMobST_Calibration/data/TripChain')
setwd('~/SimMobST_Calibration/data/TripChain')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
# Input: as input parameter
start <- start_hr*60*60 # 10AM (unit: sec)
end <- end_hr*60*60 # 11AM (unit: sec)
interval_od <- interval_od_min*60 # time interval: 15min -> 900sec
##
# 2.1 TripChain data
TripChain_raw <- as.data.table(fread('TripChain.csv', sep = ';'))
temp <- subset(TripChain_raw, select=c(trip_id, person_id, trip_start_time,
subtrip_origin_id, subtrip_destination_id,
sequence_num, travel_mode))
# Only car and taxi to be considered
TripChain_anal <- subset(temp , travel_mode=='Car' | travel_mode=='Taxi')
# 2.2 TAZ data
TAZ_raw <- as.data.table(fread('node_to_zone.csv'))
TripChain_raw
## 3. Data assimilation of TripChain & TAZ ==> Table 1 & 2
# 3.1 Table 1 (Refefence table): OD pair
ODpair_temp <- subset(TripChain_anal, select=c(subtrip_origin_id, subtrip_destination_id))
ODpair <- unique(ODpair_temp)
ODpair
# Generation of OD pair table *NEED TO BE IMPROVED, TAKES TOO MUCH TIME (29/Jan, 2016) *IMPROVED THROU through Vectorization (1/Feb, 2016)
NtoZ <- function(node1, node2){
zone <- c(TAZ_raw$zone_id[which(TAZ_raw$id==node1)], TAZ_raw$zone_id[which(TAZ_raw$id==node2)])
return(zone)
}
zone <- t(mapply(NtoZ, ODpair$subtrip_origin_id, ODpair$subtrip_destination_id))
zone <- as.data.table(zone); colnames(zone) <- c('zone_o', 'zone_d')
index <- c(1:dim(ODpair)[1])
ODpair <- cbind(index, ODpair, zone)
ODpair
# 3.2 Table 2 (Data table): OD data
# Starting Time
# Converting time unit into 'sec'
time <- strsplit(TripChain_anal$trip_start_time, ":")
TimeConverter <- function(time){
time <- as.numeric(time)
time[1]*3600+time[2]*60+time[3]
}
startingtime <- sapply(time, TimeConverter)
TripChain_anal$trip_start_time <- startingtime # Inserting changed time format
# Time interval
no_interval_od = (end-start)/interval_od; # Classify simulation time into each time interval
t_od <- array(0, dim=no_interval_od);
t_od[1] = start;
for (i in 2:no_interval_od){
t_od[i] = t_od[i-1] + interval_od;
}
# Vehicle count through individual allocation for each time interval and OD pairs
uni_tinterval <- t_od
#1 Based on time interval
# OD index to TripChain
ODpair_temp <- ODpair
code <- paste(TripChain_anal$subtrip_origin_id,TripChain_anal$subtrip_destination_id, sep=" ")
TripChain_anal <- cbind(TripChain_anal, code)
code <- paste(ODpair$subtrip_origin_id,ODpair$subtrip_destination_id, sep=" ")
ODpair_temp <- cbind(ODpair_temp, code)
#index
index_match <- match(TripChain_anal$code, ODpair_temp$code)
TripChain_anal <- cbind(TripChain_anal, index_match)
# Split TripChain into each time interval
for (i in 1:length(uni_tinterval)){
if (i==length(uni_tinterval)){
ad <- which(TripChain_anal$trip_start_time>=uni_tinterval[i] & TripChain_anal$trip_start_time<(uni_tinterval[i]+900))
ti <- as.data.table(rep(uni_tinterval[i], time=length(ad))); colnames(ti) <- c('ti')
sl <- cbind(TripChain_anal[ad], ti)
assign(paste("sl", i, sep = "."), sl)
} else {
ad <- which(TripChain_anal$trip_start_time>=uni_tinterval[i] & TripChain_anal$trip_start_time<uni_tinterval[i+1])
ti <- as.data.table(rep(uni_tinterval[i], time=length(ad))); colnames(ti) <- c('ti')
sl <- cbind(TripChain_anal[ad], ti)
assign(paste("sl", i, sep = "."), sl)
}
}
#2 Based on OD pair
myList <- ls(pattern = "sl.")
for (i in 1:length(myList)){
myTemp <- get(myList[i])
myTable <- as.data.frame(table(myTemp$index))
colnames(myTable) <-c('index_a', 'count')
ODpair <- as.data.frame(ODpair); colnames(ODpair) <- c('index_a', colnames(ODpair)[2:5])
# should we? ODpair$index_a <- as.numeric(ODpair$index_a) myTable$index_a <- as.numeric(myTable$index_a)
if (i==1){
ODdata <- merge(ODpair, myTable, by='index_a', all=TRUE)
} else {
temp <- merge(ODpair, myTable, by='index_a', all=TRUE)
ODdata <- rbind(ODdata, temp)
}
}
#3 NA count to be 0
ODdata[which(is.na(ODdata$count)),]$count <- 0
#4 Add Time Interval
time_interval <- as.data.table(rep(uni_tinterval, each=dim(ODpair)[1])); colnames(time_interval) <- c('time_interval')
ODdata <- cbind(ODdata, time_interval)
# -> Dimension of ODdata is (44,077*4=176,308). So, Zone data
# 3.3 Table 3 (Data table): Zone data
zonecode <- as.data.table(paste(ODdata$zone_o, ODdata$zone_d, sep=" ")); colnames(zonecode) <- c("zonecode")
ODdata_forzone <- ODdata;
ODdata_forzone <- cbind(ODdata_forzone, zonecode)
Zonepair <- as.data.table(unique(ODdata_forzone$zonecode)); colnames(Zonepair) <- c("zonecode")
temp <- separate(Zonepair, col=zonecode, into=c("zone_o", "zone_d"), sep=" ")
index_forzone <- c(1:dim(Zonepair)[1])
Zonepair <- cbind(Zonepair, temp, index_forzone)
for (i in 1:length(uni_tinterval)){
temp1 <- subset(ODdata_forzone, subset=(time_interval==uni_tinterval[i]))
myTable_forzone <- as.data.frame(table(temp1$zonecode)); colnames(myTable_forzone) <- c("zonecode", "count")
if (i==1){
Zonedata <- merge(Zonepair, myTable_forzone, by='zonecode', all=TRUE)
Zonedata <- Zonedata[order(Zonedata$index_forzone),] # Ordering
Zonedata <- cbind(Zonedata, rep(uni_tinterval[i], dim(Zonedata)[1]))
} else {
temp2 <- merge(Zonepair, myTable_forzone, by='zonecode', all=TRUE)
temp2 <- temp2[order(temp2$index_forzone),] # Ordering
temp2 <- cbind(temp2, rep(uni_tinterval[i], dim(temp2)[1]))
Zonedata <- rbind(Zonedata, temp2)
}
}
colnames(Zonedata) <- c(colnames(Zonedata)[1:(dim(Zonedata)[2]-1)], "time_interval")
# -> Dimension of ODdata is (37,351*4=149,404). 15% reduced from size of OD data.
# 3.4 Table 4 (Calibration table): Theta
# OD theta
theta_od = subset(ODdata, select=c('count'))
# Zone theta
theta_zone = subset(Zonedata, select=c('count'))
theta_od
ODdata
head(ODdata)
head(ODdata)
