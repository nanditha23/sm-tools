# Case 3: Only one "-"
if (unlist(gregexpr(pattern='-',temp$Seq[j]))!=-1 && unlist(gregexpr(pattern=',',temp$Seq[j]))==-1)
{
#a <- as.data.frame((levels(temp$Seq[j]))[temp$Seq[j]]); colnames(a) <- c('a')
a <- as.data.frame(temp$Seq); colnames(a)<-c('a')
b <- separate(a, col=a, into=c("from", "to"), sep="-")
a <- seq(as.numeric(b$from), as.numeric(b$to))
}
# Case 4: Only one ","
if (unlist(gregexpr(pattern=',',temp$Seq[j]))!=-1 && unlist(gregexpr(pattern='-',temp$Seq[j]))==-1)
{
#a <- as.data.frame((levels(temp$Seq[j]))[temp$Seq[j]]); colnames(a) <- c('a')
a <- as.data.frame(temp$Seq); colnames(a)<-c('a')
b <- cSplit(a, 1, ",")
a <- as.numeric(b)
}
# Duplications
a <- unique(a)
return(a)
}
}
# Using Ordering Ft
l<-1 # j<nseg
A <- OrderingGen(l)
if (nseg>1){
for (l in 2:nseg){
A_temp <-OrderingGen(l)
A <- c(A, A_temp)
}}
A<-as.data.frame(A); colnames(A) <- c("SeqInData")
orderedData <- cbind(unorderedData, A)
for (i in 2:length(SensorList)){ #i<-34
unorderedData <- Data_CBD_reformed[which(Data_CBD_reformed$SensorID==SensorList[i]),]
refTable <- Ref_raw[which(Ref_raw$SensorID==SensorList[i]),]
refTable <- subset(refTable, subset=(as.character(levels(refTable$Seq)[refTable$Seq])!=""))
SegList <- unique(as.character(unorderedData$Seg))
nseg <- length(SegList)
# Ordering Ft
# Using Ordering Ft
l<-1 # j<nseg
A <- OrderingGen(l);
if (nseg>1){
for (l in 2:nseg){ #l<-2
A_temp <-OrderingGen(l)
A <- c(A, A_temp)
}}
A<-as.data.frame(A); colnames(A) <- c("SeqInData")
orderedData_temp <- cbind(unorderedData, A)
orderedData <- rbind(orderedData, orderedData_temp)
}
# Time generation
Time_eigen <- unique(Data_CBD$Ti)
Time <- as.data.table(rep(unique(Data_CBD$Ti), each=dim(orderedData)[1]));
orderedData_time <- cbind(Time,
rep(as.character(orderedData$SensorID), length(Time_eigen)), rep(as.character(orderedData$SegID), length(Time_eigen)),
rep(as.character(orderedData$LaneID), length(Time_eigen)), rep(as.character(orderedData$SeqInData), length(Time_eigen)))
orderedData_time <- as.data.table(orderedData_time); colnames(orderedData_time) <- c("Time", colnames(orderedData))
# 3.2.2 Matching with Data_CBD
# Taking 6-10AM from Data_CBD & orderedData_time
st <- TimeConverter(c(13,30)) # 7AM
et <- TimeConverter(c(15,30)) # 7:30AM
Data_CBD_target <- subset(Data_CBD, subset=(Data_CBD$Ti>=st & Data_CBD$Ti<=et))
orderedData_target <- subset(orderedData_time, subset=(orderedData_time$Time>=st & orderedData_time$Time<=et))
Time_eigen_terget <- Time_eigen[which(Time_eigen>=st & Time_eigen<=et)]
# RealData_Save$Counts[which(RealData_Save$Counts>2040)] <- 0
# RealData_Save$Counts[which(is.na(RealData_Save$Counts))] <- 0
# Remove NA values and 0
TooMuch <- which(RealData_Save$Counts>2040);
NAvalues <- which(is.na(RealData_Save$Counts));
NoGood <- c(TooMuch, NAvalues);
TooMuch <- which(RealData_Save$Counts>2040);
# Time Change to Simulation format
RealData_Save <- subset(RealData, select=c(-SeqInData));
RealData
# Generation of Real Data
i <- 1; orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData <- cbind(orderedData_time_temp_2, Counts); colnames(RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # #t <- 100;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
RealData <- rbind(RealData, RealData_temp)
}
for (i in 2:length(SensorList)){ # i<-212
orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
if (dim(Data_CBD_temp)[1]!=0){
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 5
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}
Temp_RealData <- cbind(orderedData_time_temp_2, Counts); colnames(Temp_RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # t <- 2;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
if (dim(Data_CBD_temp_2)[1]!=0){
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
Temp_RealData <- rbind(Temp_RealData, RealData_temp)
}
}
RealData <- rbind(RealData, Temp_RealData)
} } }
RealData_Save <- subset(RealData, select=c(-SeqInData));
# RealData_Save$Counts[which(RealData_Save$Counts>2040)] <- 0
# RealData_Save$Counts[which(is.na(RealData_Save$Counts))] <- 0
# Remove NA values and 0
TooMuch <- which(RealData_Save$Counts>2040);
NAvalues <- which(is.na(RealData_Save$Counts));
NoGood <- c(TooMuch, NAvalues);
dim(RealData_Save) # 12150 5
RealData_Save <- RealData_Save[-NoGood,] # 5294 5
dim(RealData_Save)
head(RealData_Save)
screenline <- read.table("screenline_mapping_segments_Extended_CBD", sep=";", header=TRUE)
head(screenline)
colnames(screenline)[1] <- c("SegID")
screenline$SegID <- as.character(screenline$SegID)
converted_data <- merge(RealData_Save, screenline, by=c("SegID"))
head(converted_data)
uniqueT <- unique(converted_data$Time)
uniqueSeg <- unique(converted_data$SegID)
length(uniqueSeg); length(uniqueT);
token <- c(seq(1, length(uniqueT), by=3))
i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- temp_3
NewData
NewData
for (j in 2:length(uniqueSeg)){
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- rbind(NewData, temp_3)
}
NewData
# For Loops for time
for (i in 2:length(uniqueT)){
#i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- temp_3
for (j in 2:length(uniqueSeg)){
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- rbind(NewData, temp_3)
}
NewData <- rbind(NewData, NewData_temp)
}
j
i
dim(NewData)
head(NewData)
(NewData)
length(uniqueSeg))
length(uniqueSeg)
j<-14
i
i
length(uniqueT)
length(uniqueT)
token
length(token)
i<-8
agg <- c(token[i], token[i]+1, token[i]+2)
agg
head(converted_data)
uniqueT <- unique(converted_data$Time)
uniqueSeg <- unique(converted_data$SegID)
length(uniqueSeg); length(uniqueT);
token <- c(seq(1, length(uniqueT), by=3))
i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- temp_3
for (j in 2:length(uniqueSeg)){
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- rbind(NewData, temp_3)
}
# For Loops for time
for (i in 2:length(token)){
#i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- temp_3
for (j in 2:length(uniqueSeg)){ #j<-14 i
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- rbind(NewData, temp_3)
}
NewData <- rbind(NewData, NewData_temp)
}
dim(NewData)
(NewData)
write.table(NewData, file='NewCountData1330to1530.csv', row.names=FALSE, col.names=TRUE)
getwd()
# Taking 6-10AM from Data_CBD & orderedData_time
st <- TimeConverter(c(07,30)) # 7AM
et <- TimeConverter(c(09,30)) # 7:30AM
Data_CBD_target <- subset(Data_CBD, subset=(Data_CBD$Ti>=st & Data_CBD$Ti<=et))
orderedData_target <- subset(orderedData_time, subset=(orderedData_time$Time>=st & orderedData_time$Time<=et))
Time_eigen_terget <- Time_eigen[which(Time_eigen>=st & Time_eigen<=et)]
# Generation of Real Data
i <- 1; orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData <- cbind(orderedData_time_temp_2, Counts); colnames(RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # #t <- 100;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
RealData <- rbind(RealData, RealData_temp)
}
for (i in 2:length(SensorList)){ # i<-212
orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
if (dim(Data_CBD_temp)[1]!=0){
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 5
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}
Temp_RealData <- cbind(orderedData_time_temp_2, Counts); colnames(Temp_RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # t <- 2;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
if (dim(Data_CBD_temp_2)[1]!=0){
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
Temp_RealData <- rbind(Temp_RealData, RealData_temp)
}
}
RealData <- rbind(RealData, Temp_RealData)
} } }
# Time Change to Simulation format
RealData_Save <- subset(RealData, select=c(-SeqInData));
# RealData_Save$Counts[which(RealData_Save$Counts>2040)] <- 0
# RealData_Save$Counts[which(is.na(RealData_Save$Counts))] <- 0
# Remove NA values and 0
TooMuch <- which(RealData_Save$Counts>2040);
NAvalues <- which(is.na(RealData_Save$Counts));
NoGood <- c(TooMuch, NAvalues);
dim(RealData_Save) # 12150 5
RealData_Save <- RealData_Save[-NoGood,] # dim(RealData_Save) 5294 5
# Screenline
head(RealData_Save)
screenline <- read.table("screenline_mapping_segments_Extended_CBD", sep=";", header=TRUE)
head(screenline)
colnames(screenline)[1] <- c("SegID")
screenline$SegID <- as.character(screenline$SegID)
converted_data <- merge(RealData_Save, screenline, by=c("SegID"))
head(converted_data)
uniqueT <- unique(converted_data$Time)
uniqueSeg <- unique(converted_data$SegID)
length(uniqueSeg); length(uniqueT);
token <- c(seq(1, length(uniqueT), by=3))
i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- temp_3
for (j in 2:length(uniqueSeg)){
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- rbind(NewData, temp_3)
}
# For Loops for time
for (i in 2:length(token)){
#i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- temp_3
for (j in 2:length(uniqueSeg)){ #j<-14 i
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- rbind(NewData, temp_3)
}
NewData <- rbind(NewData, NewData_temp)
}
## 4. Write Actual
write.table(NewData, file='NewCountData0730to0930.csv', row.names=FALSE, col.names=TRUE)
st <- TimeConverter(c(17,30)) # 7AM
et <- TimeConverter(c(19,30)) # 7:30AM
Data_CBD_target <- subset(Data_CBD, subset=(Data_CBD$Ti>=st & Data_CBD$Ti<=et))
orderedData_target <- subset(orderedData_time, subset=(orderedData_time$Time>=st & orderedData_time$Time<=et))
Time_eigen_terget <- Time_eigen[which(Time_eigen>=st & Time_eigen<=et)]
# Generation of Real Data
i <- 1; orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData <- cbind(orderedData_time_temp_2, Counts); colnames(RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # #t <- 100;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
Counts <- rbind(Counts, Counts_temp)
}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
RealData <- rbind(RealData, RealData_temp)
}
for (i in 2:length(SensorList)){ # i<-212
orderedData_time_temp <- orderedData_target[which(orderedData_target$SensorID==SensorList[i]),]
Data_CBD_temp <- Data_CBD_target[which(Data_CBD_target$SensorID==SensorList[i]),]
if (dim(Data_CBD_temp)[1]!=0){
t <- 1;  orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 5
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}
Temp_RealData <- cbind(orderedData_time_temp_2, Counts); colnames(Temp_RealData) <- c(colnames(orderedData_target), "Counts")
for (t in 2:length(Time_eigen_terget)-1){ # t <- 2;
orderedData_time_temp_2 <- subset(orderedData_time_temp, subset=(orderedData_time_temp$Time==Time_eigen_terget[t]))
Data_CBD_temp_2 <- subset(Data_CBD_temp, subset=(Data_CBD_temp$Ti==Time_eigen_terget[t]))
if (dim(Data_CBD_temp_2)[1]!=0){
#Counts
f<-1; Counts <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
if (dim(orderedData_time_temp_2)[1]!=1){
for (f in 2:dim(orderedData_time_temp_2)[1]){ # f <- 3
if (orderedData_time_temp_2$SeqInData[f]<=22){
Counts_temp <- as.data.frame(Data_CBD_temp_2)[,(as.numeric(orderedData_time_temp_2$SeqInData[f])+5)]
}else {Counts_temp <- NA}
Counts <- rbind(Counts, Counts_temp)
}}
RealData_temp <- cbind(orderedData_time_temp_2, Counts); colnames(RealData_temp) <- c(colnames(orderedData_target), "Counts")
Temp_RealData <- rbind(Temp_RealData, RealData_temp)
}
}
RealData <- rbind(RealData, Temp_RealData)
} } }
# Time Change to Simulation format
RealData_Save <- subset(RealData, select=c(-SeqInData));
# RealData_Save$Counts[which(RealData_Save$Counts>2040)] <- 0
# RealData_Save$Counts[which(is.na(RealData_Save$Counts))] <- 0
# Remove NA values and 0
TooMuch <- which(RealData_Save$Counts>2040);
NAvalues <- which(is.na(RealData_Save$Counts));
NoGood <- c(TooMuch, NAvalues);
dim(RealData_Save) # 12150 5
RealData_Save <- RealData_Save[-NoGood,] # dim(RealData_Save) 5294 5
# Screenline
head(RealData_Save)
screenline <- read.table("screenline_mapping_segments_Extended_CBD", sep=";", header=TRUE)
head(screenline)
colnames(screenline)[1] <- c("SegID")
screenline$SegID <- as.character(screenline$SegID)
converted_data <- merge(RealData_Save, screenline, by=c("SegID"))
head(converted_data)
uniqueT <- unique(converted_data$Time)
uniqueSeg <- unique(converted_data$SegID)
length(uniqueSeg); length(uniqueT);
token <- c(seq(1, length(uniqueT), by=3))
i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- temp_3
for (j in 2:length(uniqueSeg)){
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData <- rbind(NewData, temp_3)
}
# For Loops for time
for (i in 2:length(token)){
#i<-1 # < length(token) # For 15min
agg <- c(token[i], token[i]+1, token[i]+2)
uniqueT[agg]
j<-1 # For specific segment
head(converted_data)
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- temp_3
for (j in 2:length(uniqueSeg)){ #j<-14 i
temp_1 <- subset(converted_data, subset=(converted_data$SegID==uniqueSeg[j]))
temp_2 <- subset(temp_1, subset=(temp_1$Time>=uniqueT[agg[1]] & temp_1$Time<=uniqueT[agg[3]]))
temp_3 <- temp_2[1,]; temp_3 <- subset(temp_3, select=c("SegID", "Time", "Counts", "screenLineSegmet"))
temp_3$Counts <- sum(temp_2$Counts)
NewData_temp <- rbind(NewData, temp_3)
}
NewData <- rbind(NewData, NewData_temp)
}
## 4. Write Actual
write.table(NewData, file='NewCountData1730to1930.csv', row.names=FALSE, col.names=TRUE)
