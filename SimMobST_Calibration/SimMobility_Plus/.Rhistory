start_hr <- 10; end_hr <- 11 # Previously, start = 10; end = 11;
interval_od_min <- 15; interval_sensor <- 15; no_sensor <- 650;
F_start <- proc.time()
## 1. Environmental setting
# Set working directory
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/data/TripChain')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
# Input: as input parameter
start <- start_hr*60*60 # 10AM (unit: sec)
end <- end_hr*60*60 # 11AM (unit: sec)
interval_od <- interval_od_min*60 # time interval: 15min -> 900sec
## 2. Data import
# 2.1 TripChain data
TripChain_raw <- as.data.table(fread('TripChain.csv', sep = ';'))
temp <- subset(TripChain_raw, select=c(trip_id, person_id, trip_start_time,
subtrip_origin_id, subtrip_destination_id,
sequence_num, travel_mode))
# Only car and taxi to be considered
TripChain_anal <- subset(temp , travel_mode=='Car' | travel_mode=='Taxi')
# 2.2 TAZ data
TAZ_raw <- as.data.table(fread('node_to_zone.csv'))
## 3. Data assimilation of TripChain & TAZ ==> Table 1 & 2
# 3.1 Table 1 (Refefence table): OD pair
ODpair_temp <- subset(TripChain_anal, select=c(subtrip_origin_id, subtrip_destination_id))
ODpair <- unique(ODpair_temp)
# Generation of OD pair table *NEED TO BE IMPROVED, TAKES TOO MUCH TIME (29/Jan, 2016) *IMPROVED THROU through Vectorization (1/Feb, 2016)
NtoZ <- function(node1, node2){
zone <- c(TAZ_raw$zone_id[which(TAZ_raw$id==node1)], TAZ_raw$zone_id[which(TAZ_raw$id==node2)])
return(zone)
}
zone <- t(mapply(NtoZ, ODpair$subtrip_origin_id, ODpair$subtrip_destination_id))
zone <- as.data.table(zone); colnames(zone) <- c('zone_o', 'zone_d')
index <- c(1:dim(ODpair)[1])
ODpair <- cbind(index, ODpair, zone)
# 3.2 Table 2 (Data table): OD data
# Starting Time
# Converting time unit into 'sec'
time <- strsplit(TripChain_anal$trip_start_time, ":")
TimeConverter <- function(time){
time <- as.numeric(time)
time[1]*3600+time[2]*60+time[3]
}
startingtime <- sapply(time, TimeConverter)
TripChain_anal$trip_start_time <- startingtime # Inserting changed time format
# Time interval
no_interval_od = (end-start)/interval_od; # Classify simulation time into each time interval
t_od <- array(0, dim=no_interval_od);
t_od[1] = start;
for (i in 2:no_interval_od){
t_od[i] = t_od[i-1] + interval_od;
}
# Vehicle count through individual allocation for each time interval and OD pairs
uni_tinterval <- t_od
#1 Based on time interval
# OD index to TripChain
ODpair_temp <- ODpair
code <- paste(TripChain_anal$subtrip_origin_id,TripChain_anal$subtrip_destination_id, sep=" ")
TripChain_anal <- cbind(TripChain_anal, code)
code <- paste(ODpair$subtrip_origin_id,ODpair$subtrip_destination_id, sep=" ")
ODpair_temp <- cbind(ODpair_temp, code)
#index
index_match <- match(TripChain_anal$code, ODpair_temp$code)
TripChain_anal <- cbind(TripChain_anal, index_match)
# Split TripChain into each time interval
for (i in 1:length(uni_tinterval)){
if (i==length(uni_tinterval)){
ad <- which(TripChain_anal$trip_start_time>uni_tinterval[i] & TripChain_anal$trip_start_time<=(uni_tinterval[i]+900))
ti <- as.data.table(rep(uni_tinterval[i], time=length(ad))); colnames(ti) <- c('ti')
sl <- cbind(TripChain_anal[ad], ti)
assign(paste("sl", i, sep = "."), sl)
} else {
ad <- which(TripChain_anal$trip_start_time>=uni_tinterval[i] & TripChain_anal$trip_start_time<uni_tinterval[i+1])
ti <- as.data.table(rep(uni_tinterval[i], time=length(ad))); colnames(ti) <- c('ti')
sl <- cbind(TripChain_anal[ad], ti)
assign(paste("sl", i, sep = "."), sl)
}
}
#2 Based on OD pair
myList <- ls(pattern = "sl.")
for (i in 1:length(myList)){
myTemp <- get(myList[i])
myTable <- as.data.frame(table(myTemp$index))
colnames(myTable) <-c('index_a', 'count')
ODpair <- as.data.frame(ODpair); colnames(ODpair) <- c('index_a', colnames(ODpair)[2:5])
# should we? ODpair$index_a <- as.numeric(ODpair$index_a) myTable$index_a <- as.numeric(myTable$index_a)
if (i==1){
ODdata <- merge(ODpair, myTable, by='index_a', all=TRUE)
} else {
temp <- merge(ODpair, myTable, by='index_a', all=TRUE)
ODdata <- rbind(ODdata, temp)
}
}
#3 NA count to be 0
ODdata[which(is.na(ODdata$count)),]$count <- 0
#4 Add Time Interval
time_interval <- as.data.table(rep(uni_tinterval, each=dim(ODpair)[1])); colnames(time_interval) <- c('time_interval')
ODdata <- cbind(ODdata, time_interval)
# -> Dimension of ODdata is (44,077*4=176,308). So, Zone data
# 3.3 Table 3 (Data table): Zone data
zonecode <- as.data.table(paste(ODdata$zone_o, ODdata$zone_d, sep=" ")); colnames(zonecode) <- c("zonecode")
ODdata_forzone <- ODdata;
ODdata_forzone <- cbind(ODdata_forzone, zonecode)
Zonepair <- as.data.table(unique(ODdata_forzone$zonecode)); colnames(Zonepair) <- c("zonecode")
temp <- separate(Zonepair, col=zonecode, into=c("zone_o", "zone_d"), sep=" ")
index_forzone <- c(1:dim(Zonepair)[1])
Zonepair <- cbind(Zonepair, temp, index_forzone)
for (i in 1:length(uni_tinterval)){
temp1 <- subset(ODdata_forzone, subset=(time_interval==uni_tinterval[i]))
myTable_forzone <- as.data.frame(table(temp1$zonecode)); colnames(myTable_forzone) <- c("zonecode", "count")
if (i==1){
Zonedata <- merge(Zonepair, myTable_forzone, by='zonecode', all=TRUE)
Zonedata <- Zonedata[order(Zonedata$index_forzone),] # Ordering
Zonedata <- cbind(Zonedata, rep(uni_tinterval[i], dim(Zonedata)[1]))
} else {
temp2 <- merge(Zonepair, myTable_forzone, by='zonecode', all=TRUE)
temp2 <- temp2[order(temp2$index_forzone),] # Ordering
temp2 <- cbind(temp2, rep(uni_tinterval[i], dim(temp2)[1]))
Zonedata <- rbind(Zonedata, temp2)
}
}
colnames(Zonedata) <- c(colnames(Zonedata)[1:(dim(Zonedata)[2]-1)], "time_interval")
# -> Dimension of ODdata is (37,351*4=149,404). 15% reduced from size of OD data.
# 3.4 Table 4 (Calibration table): Theta
# OD theta
theta_od = subset(ODdata, select=c('count'))
# Zone theta
theta_zone = subset(Zonedata, select=c('count'))
# 4. Saving
write.csv(ODdata, file='ODdata.csv')
write.csv(Zonedata, file='Zonedata.csv')
write.csv(ODpair, file='ODpair.csv')
write.csv(Zonepair, file='Zonepair.csv')
write.csv(theta_OD, file='theta_OD.csv')
write.csv(theta_zone, file='theta_zone.csv')
write.csv(theta_od, file='theta_OD.csv')
F_end <- proc.time()
F_computationtime <- (F_end-F_start)[3] #unit: sec
F_computationtime
dim(theta_zone)
N_OD <- dim(theta_zone)
no_interval_od
no_od_intervals <- no_interval_od
no_ODs <- N_OD/no_od_intervals
no_ODs
N_OD
dim(theta_zone)[1]
N_OD <- dim(theta_zone)[1]
no_od_intervals <- no_interval_od
no_ODs <- N_OD/no_od_intervals
no_ODs
c(N_OD, no_od_intervals, no_ODs)
t(c(N_OD, no_od_intervals, no_ODs))
t(as.data.table(c(N_OD, no_od_intervals, no_ODs)))
as.data.table(c(N_OD, no_od_intervals, no_ODs))
as.data.table(c(N_OD, no_od_intervals, no_ODs))
OD_confg <- as.data.table(c(N_OD, no_od_intervals, no_ODs))
OD_confg
write.csv(OD_confg, file='OD_confg.csv')
write.csv(OD_confg, file='OD_confg.csv', head=FALSE)
write.csv(OD_confg, file='OD_confg.csv', header=FALSE)
write.csv(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=FALSE, sep=",")
write.csv(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=FALSE)
colnames(OD_confg)
write.csv(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=TRUE)
write.csv(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=FALSE)
as.data.frame(c(N_OD, no_od_intervals, no_ODs))
OD_confg <- as.data.frame(c(N_OD, no_od_intervals, no_ODs))
OD_confg
write.csv(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=FALSE)
write.table(OD_confg, file='OD_confg.csv', row.names=FALSE, col.names=FALSE)
write.table(ODdata, file='ODdata.csv', row.names=FALSE, col.names=FALSE)
write.table(Zonedata, file='Zonedata.csv', row.names=FALSE, col.names=FALSE)
write.table(ODpair, file='ODpair.csv', row.names=FALSE, col.names=FALSE)
write.table(Zonepair, file='Zonepair.csv', row.names=FALSE, col.names=FALSE)
write.table(theta_od, file='theta_OD.csv', row.names=FALSE, col.names=FALSE)
write.table(theta_zone, file='theta_zone.csv', row.names=FALSE, col.names=FALSE)
odpair <- fread(paste0(datapath, c("TripChain/Zonepair.csv")))
datapath <- c('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/data/')
odpair <- fread(paste0(datapath, c("TripChain/Zonepair.csv")))
odpair
head(Zonepair)
colnames(odpair) <- c('zonecode', 'zone_o', 'zone_d', 'index_forzone')
odpair
odpair <- subset(odpair, select=c('zone_o', 'zone_d'))
odpair
no_od = length(odpair[[1]])
no_od
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/data/TripChain')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
# Input: as input parameter
start <- start_hr*60*60 # 10AM (unit: sec)
end <- end_hr*60*60 # 11AM (unit: sec)
interval_od <- interval_od_min*60 # time interval: 15min -> 900sec
TripChain_raw <- as.data.table(fread('TripChain.csv', sep = ';'))
head(TripChain_raw)
head(TripChain_raw)
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/SimMobility/')
list.files()
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
data <- fread('VehicleCounts.csv')
head(data)
colnames(data) <- c('Time', 'SensorID', 'SegmentID', 'LaneID', 'Count')
head(data)
head(data, 10)
head(data)
unique(data$Time)[1]
unique(data$Time)[i<-1]
subset(data, subset=(Time==unique(data$Time)[i<-1] && SensorID==unique(data$SensorID)[i<-1]))
subset(data, subset=(Time==unique(data$Time)[i<-1] || SensorID==unique(data$SensorID)[i<-1]))
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp1
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[i<-1]))
temp2
apply(temp2$Count, sum)
apply(temp2$Count, 2, sum)
apply(temp2$Count, 1, sum)
sum(temp2$Count)
c(colnames(temp2)[1:2])
cbind(c(colnames(temp2)[1:2]), sum(temp2$Count))
cbind(temp2$Time, temp2$SensorID, sum(temp2$Count))
cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count))
as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data
dim(data)
dim(unique(data$Time))[1]
length(unique(data$Time))[1]
unique(data$Time
)
temp2
as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
unique(data$SensorID)
dim(unique(data$SensorID))
length(unique(data$SensorID))
length(data$SensorID)
length(unique(data$Time))
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-1]))
data_sorted <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted
colnames(data_sorted) <- c('Time','SensorID','AggCount')
data_sorted
for (i in 2:length(unique(data$Time))){
for (j in 2:length(data$SensorID)){
temp1 <- subset(data, subset=(Time==unique(data$Time)[i]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j]))
data_sorted_temp <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
}
data_sorted
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-2]))
data_sorted_temp <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted_temp
data_sorted <- rbind(data_sorted, data_sorted_temp)
rm(data_sorted)
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-1]))
data_sorted <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/SimMobility/')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
data <- fread('VehicleCounts.csv')
head(data)
colnames(data) <- c('Time', 'SensorID', 'SegmentID', 'LaneID', 'Count')
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-1]))
data_sorted <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-2]))
data_sorted_temp <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
data_sorted
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j<-1]))
data_sorted <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted
for (i in 2:length(unique(data$Time))){
for (j in 2:length(data$SensorID)){
temp1 <- subset(data, subset=(Time==unique(data$Time)[i]))
temp2 <- subset(temp1, subset=(SensorID==unique(data$SensorID)[j]))
data_sorted_temp <- as.data.table(cbind(temp2$Time[1], temp2$SensorID[1], sum(temp2$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
}
colnames(data_sorted) <- c('Time','SensorID','AggCount')
data_sorted
tail(data_sorted)
is.na(data$Time)
sum(is.na(data$Time))
data_sorted
dim(data_sorted)
dim(data)
dim(data_sorted)[1]/dim(data)[1]
subset(data, subset=(Time==unique(data$Time)[i<-1])) | SensorID==unique(data$SensorID)[j<-1]))
subset(data, subset=(Time==unique(data$Time)[i<-1]) | SensorID==unique(data$SensorID)[j<-1])
subset(data, subset=(Time==unique(data$Time)[i<-1]) & SensorID==unique(data$SensorID)[j<-1])
dim(data)
dim(data_sorted)
data_sorted[1,]
data_sorted[1:(16638+10),]
temp1 <- subset(data, subset=(Time==unique(data$Time)[i<-1]) & SensorID==unique(data$SensorID)[j<-1])
temp1
paste(data$Time, data$SensorID, sep=" ")
length(paste(data$Time, data$SensorID, sep=" "))
code <- paste(data$Time, data$SensorID, sep=" ")
cbind(data, code)
data <- cbind(data, code)
data
head(unique(data$code))
length(unique(data$code))
unicode <- unique(data$code)
unicode
subset(data, subset=(data$code==unicode[i<-1]))
as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
sortedData <- subset(data, subset=(data$code==unicode[i<-1]))
sortedData
as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
length(unicode)
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
length(unicode)
data <- cbind(data, code)
unicode <- unique(data$code)
sortedData <- subset(data, subset=(data$code==unicode[i<-1]))
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted
for (i in 2:3){ #length(unicode)
sortedData <- subset(data, subset=(data$code==unicode[i]))
data_sorted_temp <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
data_sorted
end <- proc.time()
start <- proc.time()
end <- proc.time()
totaltime <- end-start
totaltime
end[3]-start[3]
length(unicode)
# Set working directory
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/SimMobility/')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
data <- fread('VehicleCounts.csv')
colnames(data) <- c('Time', 'SensorID', 'SegmentID', 'LaneID', 'Count')
start <- proc.time()
data <- cbind(data, code)
unicode <- unique(data$code)
sortedData <- subset(data, subset=(data$code==unicode[i<-1]))
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
for (i in 2:length(unicode)){
sortedData <- subset(data, subset=(data$code==unicode[i]))
data_sorted_temp <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
end <- proc.time()
totaltime <- end[3]-start[3]
totaltime
data_sorted
length(unicode)
unicode
unique(data$code)
code <- paste(data$Time, data$SensorID, sep=" ")
code
data <- cbind(data, code)
data
unicode <- unique(data$code)
unicode
length(unicode)
# Set working directory
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/SimMobility/')
list.files()
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
data <- fread('VehicleCounts.csv')
colnames(data) <- c('Time', 'SensorID', 'SegmentID', 'LaneID', 'Count')
code <- paste(data$Time, data$SensorID, sep=" ")
start <- proc.time()
data <- cbind(data, code)
unicode <- unique(data$code)
sortedData <- subset(data, subset=(data$code==unicode[i<-1]))
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
for (i in 2:length(unicode)){
sortedData <- subset(data, subset=(data$code==unicode[i]))
data_sorted_temp <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
end <- proc.time()
totaltime <- end[3]-start[3]
colnames(data_sorted) <- c('Time','SensorID','AggCount')
data_sorted
totaltime
data_sorted
sortedData <- subset(data, subset=(data$code==unicode[i<-100]))
sortedData
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted
list.files()
ls(pattern = "VehicleCounts_")
ls(pattern = "VehicleCount")
myList <- ls(pattern = "VehicleCount")
myList
myList <- ls(pattern = "VehicleCounts.")
myList
list.files()
ls(pattern = "VehicleCo")
ls(pattern = "VehicleCounts_1")
list.files(pattern = "VehicleCounts")
list.files(pattern = "VehicleCounts")[1]
data <- fread(list.files(pattern = "VehicleCounts")[f<-1])
data
setwd('/home/simon/Copy/SimMobility/Calibration Program/SimMob_ST_Calibration_SGE - Simon/SimMobility/')
list.files(pattern = "VehicleCounts")
# Instal packages
#install.packages("data.table")
library("data.table") # For "data.table" and "fread"
#install.packages("tidyr")
library("tidyr") # For "separate"
f<-1
data <- fread(list.files(pattern = "VehicleCounts")[f<-1])
colnames(data) <- c('Time', 'SensorID', 'SegmentID', 'LaneID', 'Count')
code <- paste(data$Time, data$SensorID, sep=" ")
start <- proc.time()
data <- cbind(data, code)
unicode <- unique(data$code)
sortedData <- subset(data, subset=(data$code==unicode[i<-1]))
data_sorted <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
for (i in 2:length(unicode)){
sortedData <- subset(data, subset=(data$code==unicode[i]))
data_sorted_temp <- as.data.table(cbind(sortedData$Time[1], sortedData$SensorID[1], sum(sortedData$Count)))
data_sorted <- rbind(data_sorted, data_sorted_temp)
}
end <- proc.time()
totaltime <- end[3]-start[3]
colnames(data_sorted) <- c('Time','SensorID','AggCount')
data_sorted
totaltime
assign(paste("ds", f, sep = "."), data_sorted)
ds.1
listoffiles<-list.files(pattern = "VehicleCounts")
listoffiles
length(listoffiles)
149404/176308*100
setwd('data/TravelTimeData/')
start_time = 6; end_time=7;
#  args <- commandArgs(TRUE)
#  start_time = as.numeric(args[1]); end_time=as.numeric(args[2]);
interval = 15;
SimTT <- read.csv('../../SimMobility_SPSA/od_travel_time.csv', header=FALSE, sep=',')
SimTT <- as.data.frame(SimTT); colnames(SimTT) <-  c('Time', 'Origin', 'Destination', 'TravelTime', 'NoObservation')
## Environmental setting
#setwd('~/Desktop/0_SimMobST_Calibration/data/TravelTimeData/')
setwd('data/TravelTimeData/')
start_time = 6; end_time=7;
#  args <- commandArgs(TRUE)
#  start_time = as.numeric(args[1]); end_time=as.numeric(args[2]);
interval = 15;
SimTT <- read.csv('../../SimMobility_Plus/od_travel_time.csv', header=FALSE, sep=',')
SimTT <- as.data.frame(SimTT); colnames(SimTT) <-  c('Time', 'Origin', 'Destination', 'TravelTime', 'NoObservation')
